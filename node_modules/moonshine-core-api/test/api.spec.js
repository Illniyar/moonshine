var assert = require("assert"),
    request = require("superagent")

describe("test api",function(){
    var moonshine = null;
    afterEach(function(done){
		require("moonshine-core").db.native.connection.db.dropDatabase(function (err) {
			Object.keys(require.cache).forEach(function(key){
				delete require.cache[key];
			})
			global.__moonshine_loaded = undefined
			done(err);
		});
    })
    it("should add api to resources",function(done){
        var moonshine = require("moonshine-core")
        moonshine.runCommand("runserver",[require.resolve("moonshine-core-base")
                ,require.resolve("moonshine-core-logging")
                ,require.resolve("moonshine-core-persistence")
                ,require.resolve("moonshine-core-server")
                ,require.resolve("../")
                ,require.resolve("./_mock_app")])
            .then(function(){
                assert.ok(moonshine.api)
                request.agent().post('http://localhost:' + moonshine.server.httpServer.address().port + "/api/v1/users/")
                    .send({text:"text in model"})
                    .end(function(err,res){
                        if (err) return done(err)
                        moonshine.db.models["User"].findOne({text:"text in model"},function(err,dbmodel){
                            if (err)done(err)
                            assert.ok(dbmodel)
                            request.agent().get("http://localhost:" + moonshine.server.httpServer.address().port + "/api/v1/users/" + dbmodel.id + "/")
                                .end(function(err,res){
                                    if (err) done(err)
                                    assert.equal(res.body.text,"text in model")
                                    moonshine.server.shutdown(done)
                                })
                        })
                    })
            })
            .otherwise(done)
    })
	it.skip("should allow nested resources",function(done){
        var moonshine = require("moonshine-core")
        moonshine.runCommand("runserver",[require.resolve("moonshine-core-base")
                ,require.resolve("moonshine-core-logging")
                ,require.resolve("moonshine-core-persistence")
                ,require.resolve("moonshine-core-server")
                ,require.resolve("../")
                ,require.resolve("./_mock_app_nested")])
            .then(function(){
                request.agent().post('http://localhost:' + moonshine.server.httpServer.address().port + "/api/v1/users/")
                    .send({text:"text in nested model"})
                    .end(function(err,res){
                        if (err) return done(err)
                        moonshine.db.models["User"].findOne({text:"text in nested model"},function(err,dbmodel){
                            if (err)done(err)
                            assert.ok(dbmodel)
                            request.agent().post("http://localhost:" + moonshine.server.httpServer.address().port + "/api/v1/users/" + dbmodel.id + "/things/")
								.send({note:"a thing was sent"})
                                .end(function(err,res){
                                    if (err) done(err)
									request.agent().get("http://localhost:" + moonshine.server.httpServer.address().port + "/api/v1/users/" + dbmodel.id + "/things/")
									.end(function(err,res){
										if (err) done(err)
										assert.equal(res.body[0].note,"a thing was sent")
										assert.equal(res.body[0].user,dbmodel.id)
										assert.equal(res.body.length,1)
										moonshine.server.shutdown(done)
									})

                                })
                        })
                    })
            })
            .otherwise(done)
    })
	it.skip("should allow nested resources that can be published",function(done){
        var moonshine = require("moonshine-core")
        moonshine.runCommand("runserver",[require.resolve("moonshine-core-base")
                ,require.resolve("moonshine-core-logging")
                ,require.resolve("moonshine-core-persistence")
                ,require.resolve("moonshine-core-server")
                ,require.resolve("../")
                ,require.resolve("./_mock_app_nested_publish")])
            .then(function(){
                request.agent().post('http://localhost:' + moonshine.server.httpServer.address().port + "/api/v1/users/")
                    .send({text:"text in published nested model"})
                    .end(function(err,res){
                        if (err) return done(err)
                        moonshine.db.models["User"].findOne({text:"text in published nested model"},function(err,dbmodel){
                            if (err)done(err)
                            assert.ok(dbmodel)
                            request.agent().post("http://localhost:" + moonshine.server.httpServer.address().port + "/api/v1/users/" + dbmodel.id + "/things/")
								.send({note:"a published thing was sent"})
                                .end(function(err,res){
                                    if (err) done(err)
									request.agent().get("http://localhost:" + moonshine.server.httpServer.address().port + "/api/v1/users/" + dbmodel.id + "/things/")
									.end(function(err,res){
										if (err) done(err)
										assert.equal(res.body[0].note,"a published thing was sent")
										assert.equal(res.body[0].user,dbmodel.id)
										assert.equal(res.body.length,1)
										request.agent().post("http://localhost:" + moonshine.server.httpServer.address().port + "/api/v1/things/")
											.send({note:"another published thing was sent",
												   user:dbmodel.id})
											.end(function(err,res){
												if (err) done(err)
												console.log(res)
												request.agent().get("http://localhost:" + moonshine.server.httpServer.address().port + "/api/v1/users/" + dbmodel.id + "/things/")
												.end(function(err,res){
													if (err) done(err)
													assert.equal(res.body.length,2)
													assert.equal(res.body[0].note,"a published thing was sent")
													assert.equal(res.body[0].user,dbmodel.id)
													assert.equal(res.body[1].note,"another published thing was sent")
													assert.equal(res.body[1].user,dbmodel.id)

													moonshine.server.shutdown(done)
												})

											})
									})

                                })
                        })
                    })
            })
            .otherwise(done)
    })
})

