var moonshine = require("moonshine-core")
var settings = moonshine.settings
var logger = moonshine.logFactory()
var baucis = require("baucis")
var helpers = require("moonshine-core/helpers")
var lingo = require("lingo")


module.exports.setup = function setupApi(cb){
    moonshine.registerService("api",{
        resources:{},
        resourceOptions:{},
        createResource: function(name,options){
            if (!options && (typeof name == 'string' || name instanceof String)) options = {singular:name}
            var resource = baucis.rest(options);
            moonshine.api.resources[name] = resource
            moonshine.api.resourceOptions[name] = options
            return resource;
        },
        createNestedResource:function(name,parentResource,options) {
            options = options || {singular:name}
            var paramName = options.paramName;
            if (options.basePath && !paramName) {
                try {
                    paramName = options.basePath.match(/\:(.*?)\//)[1]
                } catch(e){
                    //not handling bad input here, will fallback to resource name based param name
                    paramName = paramName = parentResource.toLowerCase() + "Id";
                }
            } else {
                if (!paramName) paramName = parentResource.toLowerCase() + "Id";
                options.basePath = options.basePath || "/:" + paramName + "/" + lingo.en.pluralize(name.toLowerCase());
            }
            options.publish = options.publish || false;
            options.modelLimitKey = options.modelLimitKey || parentResource.toLowerCase()
            options.parent = parentResource;
            var resource = moonshine.api.createResource(name,options);
            resource.query("get",function(req,res,next){
                req.baucis.query.where(options.modelLimitKey,req.params[paramName])
                next();
            })
            resource.request("collection","post",function(req,res,next){
                var Model = req.app.get('model');
                var objs = [].concat(req.body);
                for (var i in objs) {
                    objs[i][options.modelLimitKey] = req.params[paramName]
                }
                next()
            })
            moonshine.api.resources[parentResource].use(resource)
        },
        native: baucis
    })
    cb()
}
module.exports.extend = {
    process:helpers.genericLoadModuleFunction("api",logger),
    after: function(done){
        moonshine.signal("api.resources_loaded",[],done)
    }
}

module.exports.wrapup = function addApiToServer(done){
    try {
        for (var name in moonshine.api.resources) {
            if (moonshine.api.resourceOptions[name].publish === false) {
                moonshine.api.resources[name].initialize()
            }
        }
        moonshine.server.app.use(settings.API_ROOT_PATH,baucis({version:'0.0.1'}))
        moonshine.signal("api.api_registered",[],done)
    } catch (err) {
        cb(err)
    }
}
