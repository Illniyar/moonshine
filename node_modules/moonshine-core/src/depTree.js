var requireLike = require('require-like')

module.exports.load = function(filenames,options,getComponents){
    if (!getComponents) {
        getComponents = options;
        options = {}
    }
    options = options || {}
    options.resolveLocation = options.resolveLocation || resolveLocation
    filenames = [].concat(filenames)
    var components = []
    for (var i =0; i < filenames.length; i++) {
        var filename = require.resolve(filenames[i])
        components = components.concat(getDependencies(filename,options,getComponents))
    }
    components = removeDuplicates(components)
    return components
}
function resolveLocation(parentComp,request) {
    if (parentComp) return parentComp.require.resolve(request)
    return request
}
function getDependencies(filename,options,getComponents) {
    filename = options.resolveLocation(null,filename)
    var desc = new ComponentDesc(filename);
    var rawDependencies = getComponents(desc)
    var collectedDependencies = []
    for (var i =0; i < rawDependencies.length;i++) {
        var depPath = options.resolveLocation(desc,rawDependencies[i])
        collectedDependencies = collectedDependencies.concat(getDependencies(depPath,options,getComponents))
    }
    collectedDependencies.push(desc)
    return collectedDependencies;
}

function removeDuplicates(components) {
    var found = {}
    var nodups = []
    for (var i =0; i < components.length;i++) {
        var component = components[i]
        if (!found[component.filename]) {
            found[component.filename] = true;
            nodups.push(component)
        }
    }
    return nodups
}

function ComponentDesc(filename) {
    this.require = requireLike(filename)
    this.filename = filename
    this.load = function(){return require(filename)}
}
