var loggerWrapper = require("./loggerwrapper"),
    ComponentLoader = require("./componentLoader"),
    when = require("when"),
    util = require('util')

var componentLoader = new ComponentLoader(loggerWrapper.logger)

module.exports.load = function() {
    var apps = Array.prototype.slice.call(arguments,0)
    if (arguments[0] && util.isArray(arguments[0])) {
        apps = arguments[0]
    }
    loggerWrapper.logger.info("loading moonshine")
    var promise = componentLoader.load.apply(componentLoader,apps)

    return promise.then(function(){return;})
}

module.exports.runCommand = function(command,apps,args,cb) {
    if (!apps || apps.length <=0) {
        return when.reject(new Error("must provide at least one application"))
    }
    args = args || []
    var deferred  = when.defer()
    module.exports.load(apps).then(function(){
        componentLoader.runCommand(command,args)
            .then(deferred.resolve,deferred.reject)
    }).otherwise(deferred.reject)
    if (cb) deferred.promise.then(cb,cb)
    return deferred.promise;

}
module.exports.settings = componentLoader.settings;

////// service locator
module.exports.service= {}
module.exports.registerService = function(name,service) {
    module.exports.service[name] = service
    module.exports[name] = service
}