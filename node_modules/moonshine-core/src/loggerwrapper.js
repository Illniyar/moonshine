/*
 a delayed logger, that allows the app-loader to log to console before
 the logging app is initialized, and then logs to winston.
*/
var moonshine = require("./index.js")

var lograpLogger = false
var queue = []
function getLogger() {
    if (!lograpLogger && moonshine.logFactory) {
        lograpLogger = moonshine.logFactory("moonshine.appLoader")
        queue.forEach(function(item){
            lograpLogger[item[0]].call(lograpLogger,item[1])
        })
        queue = []
    }
    return lograpLogger;
}

module.exports.logger = {
    debug:function(){
        var args = Array.prototype.slice(arguments,0)
        if (getLogger()) return getLogger().debug.apply(getLogger(),args)
        queue.push(["debug",Array.prototype.slice.call(arguments,0)])
    },
    info:function(){
        var args = Array.prototype.slice(arguments,0)
        if (getLogger()) return getLogger().info.apply(getLogger(),args)
        queue.push(["info",Array.prototype.slice.call(arguments,0)])
    },
    error:function(){
        var args = Array.prototype.slice(arguments,0)
        if (getLogger()) return getLogger().error.apply.call(getLogger(),args)
        queue.push(["error",Array.prototype.slice.call(arguments,0)])
    }
};
process.on("exit",function(){
    if (!moonshine.logFactory) {
        queue.forEach(function(item){
            console.log(item[0] + ": " + item[1][0])
            if (item[1].length > 1) {
                for (var i=1; i < item[1].length;i++) {
                    console.log(item[1][i])
                }
            }
        })
    }
})

