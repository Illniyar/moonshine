var DepTree = require("./depTree"),
    configProcessor = require("./configurationProcessor"),
    ExtensionLoader = require("./extensionLoader"),
    when = require('when'),
    fn   = require("when/function"),
    callbacks = require("when/callbacks"),
    path = require("path"),
    sequence = require("when/sequence")

function ComponentLoader(logger,extensionFunctionNames){
    this.components = null
    this.settings = {}
    this.apps = []
    this.logger = logger;
    this.efn = extensionFunctionNames || {}
    this.efn.setup = this.efn.setup || "setup"
    this.efn.extend = this.efn.extend || "extend"
    this.efn.before = this.efn.before || "before"
    this.efn.process = this.efn.process || "process"
    this.efn.after = this.efn.after || "after"
    this.efn.wrapup = this.efn.wrapup || "wrapup"
    this.efn.shutdown = this.efn.shutdown || "shutdown"
    this.rootOverrideKey = "moonshineRoot"

    this.settings.environment = configProcessor.getEnvironment()

}

ComponentLoader.prototype.load = function() {
    var apps = Array.prototype.slice.call(arguments,0)
    var cb = undefined;
	var lastArgument = arguments[arguments.length - 1]
	if (typeof lastArgument == "function") {
		cb = lastArgument
		apps = apps.slice(0, -1)
	}
    this.apps = this.apps.concat(apps);
    this.loadComponents()
    var self = this;
    var seq = sequence([this.loadSettings.bind(this)
        ,this.processExtensions.bind(this)])
    if (cb) seq = seq.then(function(){cb()},this.handleError)
    return seq
}
ComponentLoader.prototype.resolveComponentIndexLocation = function(parentComp,request)  {
    try {
        var packPath = null
        if (!parentComp) {
            packPath = request
        } else {
            packPath = path.join(parentComp.filename,"node_modules",request,"package.json")
        }
        var pack = require(packPath)
        if (pack && pack[this.rootOverrideKey]) {
            return path.join(parentComp.filename,"node_modules",request,pack[this.rootOverrideKey])
        }
        return parentRequire.resolve(request)
    }catch (e) {
        //module doesn't exist, no matter
    }
    return parentRequire.resolve(request)
}
ComponentLoader.prototype.loadComponents = function() {
    var self = this;
    this.components = DepTree.load(this.apps,function(resolver){
        var componenets = []
        configProcessor.performActionOnSettings(resolver,self.settings.environment,function(settings){
            componenets = componenets.concat((settings && settings.requiredComponents) || [])
        })
        return componenets
    })
    this.extensionLoader =new ExtensionLoader(this.components,this.logger)
}
ComponentLoader.prototype.loadSettings = function(){
    this.logger.debug("loading settings")
    var self = this
    var promises = []
    this.components.forEach(function(comp){
        promises.push(function(){
            configProcessor.performActionOnSettings(comp,self.settings.environment,function(settings){
                settings && settings.config && settings.config(self.settings)
            })
        })
    })
    return sequence(promises)
}

ComponentLoader.prototype.processExtensions = function() {
    return sequence([
        this.extensionLoader.applySetupFunction.bind(this.extensionLoader,this.efn.setup),
        this.extensionLoader.applyExtensionProcessor.bind(this.extensionLoader,this.efn.extend,this.efn.before,this.efn.process,this.efn.after),
        this.extensionLoader.applyExtensionFunction.bind(this.extensionLoader,this.efn.wrapup)
    ])
}
ComponentLoader.prototype.handleError = function(err) {
        this.logger.error("caught error while processing apps",err)
        process.exit()
}

ComponentLoader.prototype.runCommand = function(commandName,apps,args,cb) {
    if (!cb && typeof args == "function") cb = args;
    var Command = this.extensionLoader.findCommand(commandName)
    if (!Command) return when.reject(new Error("command " + commandName + " not found"))
    var deferred = when.defer()
    var command = new Command()
    command.execute(args,function(err,shouldExit,exitMessage){
        if (err) {
            if (cb) cb(err)
            return deferred.reject(err)
        }
        deferred.resolve(shouldExit,exitMessage)
        if (cb) cb(null,shouldExit,exitMessage)
    })
    return deferred.promise
}


module.exports = ComponentLoader