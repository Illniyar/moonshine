var assert = require("assert"),
    path = require("path")
var depTree = require("../src/depTree")
describe("test dependency tree apply",function(){

    function loadFiles(rootDir){
        components = depTree.load(rootDir,function(compDesc){
            return compDesc.load().components || []
        })
        return components.map(function(item){return item.filename})
    }

    it("should only load components provided",function(){
        var rootDir = path.join(__dirname,"_dep-tree","simpleSetup")
        var files = loadFiles(rootDir)
        assert.equal(files.length,2)
        assert.equal(files[0],path.join(rootDir,"node_modules","inapps","index.js"))
        assert.equal(files[1],path.join(rootDir,"index.js"))
    })
    it("should run on peer components according to dependencies",function(){
        var rootDir = path.join(__dirname,"_dep-tree","peerSetup")
        var files = loadFiles(rootDir)
        assert.equal(files.length,3)
        assert.equal(files[0],path.join(rootDir,"node_modules","nondependentApp","index.js"))
        assert.equal(files[1],path.join(rootDir,"node_modules","dependentApp","index.js"))
        assert.equal(files[2],path.join(rootDir,"index.js"))
    })
    it("should run only once if two components depend on it",function(){
        var rootDir = path.join(__dirname,"_dep-tree","multiDependSetup")
        var files = loadFiles(rootDir)
        assert.equal(files.length,4)
        assert.equal(files[0],path.join(rootDir,"node_modules","nondependentApp","index.js"))
        assert.equal(files[1],path.join(rootDir,"node_modules","dependentApp","index.js"))
        assert.equal(files[2],path.join(rootDir,"node_modules","dependentApp2","index.js"))
        assert.equal(files[3],path.join(rootDir,"index.js"))
    })
    it("should run only once if parent and child depend on it",function(){
        var rootDir = path.join(__dirname,"_dep-tree","parentDependSetup")
        var files = loadFiles(rootDir)
        assert.equal(files.length,3)
        assert.equal(files[0],path.join(rootDir,"node_modules","nondependentApp","index.js"))
        assert.equal(files[1],path.join(rootDir,"node_modules","dependentApp","index.js"))
        assert.equal(files[2],path.join(rootDir,"index.js"))
    })
    it("should allow accessing modules in files",function(){
        var rootDir = path.join(__dirname,"_dep-tree","innerRequireSetup")
        components = depTree.load(rootDir,function(compDesc){
            return compDesc.load().components || []
        })
        var strings = []
        components.forEach(function(comp){
            strings.push(comp.require("./print")())
        })
        assert.equal(strings.length,2)
        assert.equal(strings[0],"in inner function")
        assert.equal(strings[1],"in outer function")
    })
})

