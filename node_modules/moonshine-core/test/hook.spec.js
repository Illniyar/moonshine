var core = require("../../moonshine-core")
var assert = require("assert")
describe("hook",function(){
    beforeEach(core.clearHooks)
    it("should send signals to registered hooks",function(done){
        var calls=[]
        core.addHook("the.hook",function(done){
            calls.push("hook 1")
            done()
        })
        core.addHook("the.hook",function(done){
            calls.push("hook 2")
            done()
        })
        core.signal("the.hook").then(function(){
            assert.equal(calls.length,2)
            assert.equal(calls[0],"hook 1")
            assert.equal(calls[1],"hook 2")
            done()
        },done)
    })
    it("should send arguments to hooks sending array",function(done){
        var calls=[]
        core.addHook("the.hook",function(arg1,done){
            calls.push(arg1)
            done()
        })
        core.signal("the.hook",["arg1"]).then(function(){
            assert.equal(calls[0],"arg1")
            done()
        },done)
    })
    it("should send arguments to hooks single argument",function(done){
        var calls=[]
        core.addHook("the.hook",function(arg1,done){
            calls.push(arg1)
            done()
        })
        core.signal("the.hook","arg1").then(function(){
            assert.equal(calls[0],"arg1")
            done()
        },done)
    })
    it("should send nothing if no hooks exists",function(done){
        core.signal("the.hook","arg1").then(function(){
            done()
        },done)
    })
    it("should send hook with callback",function(done){
        var calls=[]
        core.addHook("the.hook",function(arg1,done){
            calls.push(arg1)
            done()
        })
        core.signal("the.hook","arg1",function(err){
            if (err) return done(err)
            assert.equal(calls.length,1)
            assert.equal(calls[0],"arg1")
            done()

        })
    })
    it("should allow multiple hooks",function(done){
        var calls=[]
        var calls2=[]
        core.addHook("the.hook",function(done){
            calls.push("hook 1")
            done()
        })
        core.addHook("the.hook2",function(done){
            calls2.push("hook 2")
            done()
        })
        core.signal("the.hook").then(function(){
            assert.equal(calls.length,1)
            assert.equal(calls[0],"hook 1")
            core.signal("the.hook2").then(function(){
                assert.equal(calls2.length,1)
                assert.equal(calls2[0],"hook 2")
                done()
            },done)
        },done)
    })
})