var assert = require("assert")
var logger = {
    debug:function(msg){},
    info:function(msg){},
    error: function(msg,err) {console.log(msg);console.log(err)}
}
describe("test loading settings",function(){
    it("it should load settings",function(done){
        var ComponentLoader = require("../src/componentLoader")
        var componentLoader =  new ComponentLoader(logger)
        componentLoader.load(require.resolve("./_componentLoader/settingsModule"))
            .then(function(){
                var settings = componentLoader.settings
                assert.equal(settings.upper,"fromUpper")
                assert.equal(settings.nested,"fromNested")
                assert.equal(settings.toOverwrite,"fromUpper")
                done()
            })
            .otherwise(done)
    })
})

describe("test middleware loading",function(){
    it("it should call all extension functions in order",function(done){
        var ComponentLoader = require("../src/componentLoader")
        var componentLoader =  new ComponentLoader(logger)
        componentLoader.load(require.resolve("./_componentLoader/fullExtensionModule"))
            .then(function(){
                var upper_name = require.resolve("./_componentLoader/fullExtensionModule")
                var inner_name = require.resolve("./_componentLoader/fullExtensionModule/node_modules/fullExtensionNestedModule")
                assert.deepEqual(global._extension_method_called,[
                    "inner_setup",
                    "upper_setup",
                    "inner_before",
                    "inner_process," + inner_name,
                    "inner_process," + upper_name,
                    "inner_after",
                    "upper_before",
                    "upper_process," + inner_name,
                    "upper_process," + upper_name,
                    "upper_after",
                    "inner_wrapup",
                    "upper_wrapup"
                ])
                global._extension_method_called = undefined
                done()
            })
            .otherwise(done)

    })
    it("it should not crush if some extension function doesn't exist",function(done){
        var ComponentLoader = require("../src/componentLoader")
        var componentLoader =  new ComponentLoader(logger)
        componentLoader.load(require.resolve("./_componentLoader/noFunctionExtensionModule"))
            .then(function(){
                //should not throw exception
                assert.ok(global._no_function_extension_called)
                global._no_function_extension_called = undefined
                done()
            })
            .otherwise(done)

    })
})