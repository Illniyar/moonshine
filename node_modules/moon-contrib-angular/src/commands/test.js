var moonshine = require("moonshine-js"),
    util = require("util"),
	when = require("when"),
    OriginalCommand = require("moonshine-js/node_modules/moonshine-core-server/src/commands/test")

function TestCommand(){

}
util.inherits(TestCommand,OriginalCommand)

TestCommand.prototype.configKarma = function(config){
    var files = []
    for(var key in moonshine.static.files) {
        if(/\.js$/.test(key))
            files.push(moonshine.static.files[key]);
    }
    config.files = (config.files || []).concat(files)
	console.log(config.files)
}
TestCommand.prototype.runKarma = function(){
    var exists =this.checkForScript("karma")
    if (!exists) return when.resolve()
    console.log("running karma tests")
    var server = require('karma').server
    var deferred = when.defer()
    var config = require("karma/lib/config").parseConfig(require.resolve("./karma.config.js"),{})
    this.configKarma(config)
    server.start(config,function(exitCode){
        if (exitCode != 0) return deferred.reject(new Error("karma exited with errorCode " + exitCode))
        deferred.resolve()
    })
    return deferred.promise
}
TestCommand.prototype.execute = function(args,cb){
		var self = this;
		OriginalCommand.prototype.execute.call(this,args,function(err,done){
			if (err) return cb(err)
			self.runKarma().then(function(){
				cb(null,true);
			})
			.otherwise(cb)
		})
}
module.exports = TestCommand;